from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes, inverse
from math import gcd
from sage.all import *

def franklinReiter(n,e,r,c1,c2):
    R.<X> = Zmod(n)[]
    f1 = X^e - c1
    f2 = (X + r)^e - c2
    # coefficient 0 = -m, which is what we wanted!
    return Integer(n-(compositeModulusGCD(f1,f2)).coefficients()[0])

  # GCD is not implemented for rings over composite modulus in Sage
  # so we do our own implementation. Its the exact same as standard GCD, but with
  # the polynomials monic representation
def compositeModulusGCD(a, b):
    if(b == 0):
        return a.monic()
    else:
        return compositeModulusGCD(b, a % b)

nbits = 1024

p = getPrime(nbits)
q = getPrime(nbits)
n = p*q

m = bytes_to_long(b"password: UWA_CTF_1S_TH3_B3ST_CTF")
r = getPrime(1024//(2**7))

e = 3

c1 = pow(m+0, e, n)
c2 = pow(m+r, e, n)

primes = [131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251]

for i in primes:
	try:
		out = long_to_bytes(franklinReiter(n, e, i, c1, c2)).decode()
		if out.startswith("password:"):
			print(f"r is {i}")
			print(out)
			break
	except:
		print(f"r is not {i}")


print(f"\n\nn: {n}")
print(f"e: {e}")
print(f"c1: {c1}")
print(f"c2: {c2}")

#n: 8488738333906402768184424303931319186937846354564498723225833198568658746612032320278568274199273168754874791886017553509671995405297044570379263394807675828948730941585892381937934974164461367350399020295544322652241314015612619952854122512360711158703276504576637980216542517131121821244413733317803612527098150050244106175075042363925415850904273713330610637797039073210153212406947693305199451883342171064289868467763520178192263996810236611412110114964094567843147988149403502201012221501784765567631635728635654552008940095240762014109309703431927276040000461554824748039435972011043716781928678118057249081937
#e: 3
#c1: 2203492093082380953201573988004010408254700540512875229186072008602268434623745039909552457544080958162582115769732896194963860518025291775984071313736715732781122794691004156623887816004267778546715233287739049892179284869968616654679000
#c2: 2203492093082380953201573988004010408254700540512875229186072008602268434623842067583381437191968969220270105412130787148302528786381716219732676843705885137233567578564806221258291496061769609198725279749641014993505432043487303203612541